; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --check-globals --version 3
; FIXME: Remove -disable-verify when verifier support catches up
; RUN: opt -disable-verify -passes=declare-to-experimental-fragments %s -S -o - \
; RUN: | FileCheck %s --implicit-check-not="call void @llvm.dbg"

source_filename = "-"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

define dso_local void @FuncSingleSimpleDeclare() #0 !dbg !4 {
; CHECK-LABEL: define dso_local void @FuncSingleSimpleDeclare(
; CHECK-SAME: ) #[[ATTR0:[0-9]+]] !dbg [[DBG4:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[VAR0:%.*]] = alloca i32, align 4
; CHECK-NEXT:    call void @llvm.dbg.declare(metadata ptr [[VAR0]], metadata [[META8:![0-9]+]], metadata !DIExpr(DIOpArg(0, ptr), DIOpDeref(i32))), !dbg [[DBG10:![0-9]+]]
; CHECK-NEXT:    ret void, !dbg [[DBG10]]
;
entry:
  %Var0 = alloca i32, align 4
  call void @llvm.dbg.declare(metadata ptr %Var0, metadata !9, metadata !DIExpression()), !dbg !8
  ret void, !dbg !8
}

define dso_local void @FuncMultipleSimpleDeclares() #0 !dbg !11 {
; CHECK-LABEL: define dso_local void @FuncMultipleSimpleDeclares(
; CHECK-SAME: ) #[[ATTR0]] !dbg [[DBG11:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[VAR0:%.*]] = alloca i32, align 4
; CHECK-NEXT:    call void @llvm.dbg.declare(metadata ptr [[VAR0]], metadata [[META12:![0-9]+]], metadata !DIExpr(DIOpArg(0, ptr), DIOpDeref(i32))), !dbg [[DBG13:![0-9]+]]
; CHECK-NEXT:    [[VAR1:%.*]] = alloca i8, align 1
; CHECK-NEXT:    call void @llvm.dbg.declare(metadata ptr [[VAR1]], metadata [[META14:![0-9]+]], metadata !DIExpr(DIOpArg(0, ptr), DIOpDeref(i8))), !dbg [[DBG13]]
; CHECK-NEXT:    ret void, !dbg [[DBG13]]
;
entry:
  %Var0 = alloca i32, align 4
  call void @llvm.dbg.declare(metadata ptr %Var0, metadata !13, metadata !DIExpression()), !dbg !12
  %Var1 = alloca i8, align 1
  call void @llvm.dbg.declare(metadata ptr %Var1, metadata !15, metadata !DIExpression()), !dbg !12
  ret void, !dbg !12
}

define dso_local void @FuncFragmentsWithoutGaps() #0 !dbg !16 {
; CHECK-LABEL: define dso_local void @FuncFragmentsWithoutGaps(
; CHECK-SAME: ) #[[ATTR0]] !dbg [[DBG16:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @llvm.dbg.declare(metadata !DIArgList([[META19:![0-9]+]], [[META21:![0-9]+]]), metadata [[META17:![0-9]+]], metadata !DIExpr(DIOpArg(0, i16), DIOpArg(1, i16), DIOpComposite(2, i32))), !dbg [[DBG18:![0-9]+]]
; CHECK-NEXT:    [[VAR0FRAG0:%.*]] = alloca i16, align 2
; CHECK-NEXT:    call void @llvm.dbg.declare(metadata ptr [[VAR0FRAG0]], metadata [[META19]], metadata !DIExpr(DIOpArg(0, ptr), DIOpDeref(i16))), !dbg [[DBG20:![0-9]+]]
; CHECK-NEXT:    [[VAR0FRAG1:%.*]] = alloca i16, align 2
; CHECK-NEXT:    call void @llvm.dbg.declare(metadata ptr [[VAR0FRAG1]], metadata [[META21]], metadata !DIExpr(DIOpArg(0, ptr), DIOpDeref(i16))), !dbg [[DBG20]]
; CHECK-NEXT:    ret void, !dbg [[DBG20]]
;
entry:
  %Var0Frag0 = alloca i16, align 2
  call void @llvm.dbg.declare(metadata ptr %Var0Frag0, metadata !18, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 16)), !dbg !17
  %Var0Frag1 = alloca i16, align 2
  call void @llvm.dbg.declare(metadata ptr %Var0Frag1, metadata !18, metadata !DIExpression(DW_OP_LLVM_fragment, 16, 16)), !dbg !17
  ret void, !dbg !17
}

define dso_local void @FuncFragmentsWithInternalGap() #0 !dbg !19 {
; CHECK-LABEL: define dso_local void @FuncFragmentsWithInternalGap(
; CHECK-SAME: ) #[[ATTR0]] !dbg [[DBG22:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @llvm.dbg.declare(metadata !DIArgList([[META25:![0-9]+]], [[META27:![0-9]+]]), metadata [[META23:![0-9]+]], metadata !DIExpr(DIOpArg(0, i8), DIOpConstant(i8 undef), DIOpArg(1, i16), DIOpComposite(3, i32))), !dbg [[DBG24:![0-9]+]]
; CHECK-NEXT:    [[VAR0FRAG0:%.*]] = alloca i8, align 2
; CHECK-NEXT:    call void @llvm.dbg.declare(metadata ptr [[VAR0FRAG0]], metadata [[META25]], metadata !DIExpr(DIOpArg(0, ptr), DIOpDeref(i8))), !dbg [[DBG26:![0-9]+]]
; CHECK-NEXT:    [[VAR0FRAG1:%.*]] = alloca i16, align 2
; CHECK-NEXT:    call void @llvm.dbg.declare(metadata ptr [[VAR0FRAG1]], metadata [[META27]], metadata !DIExpr(DIOpArg(0, ptr), DIOpDeref(i16))), !dbg [[DBG26]]
; CHECK-NEXT:    ret void, !dbg [[DBG26]]
;
entry:
  %Var0Frag0 = alloca i8, align 2
  call void @llvm.dbg.declare(metadata ptr %Var0Frag0, metadata !21, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 8)), !dbg !20
  %Var0Frag1 = alloca i16, align 2
  call void @llvm.dbg.declare(metadata ptr %Var0Frag1, metadata !21, metadata !DIExpression(DW_OP_LLVM_fragment, 16, 16)), !dbg !20
  ret void, !dbg !20
}

define dso_local void @FuncFragmentsWithStartGap() #0 !dbg !22 {
; CHECK-LABEL: define dso_local void @FuncFragmentsWithStartGap(
; CHECK-SAME: ) #[[ATTR0]] !dbg [[DBG28:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @llvm.dbg.declare(metadata !DIArgList([[META31:![0-9]+]], [[META33:![0-9]+]]), metadata [[META29:![0-9]+]], metadata !DIExpr(DIOpConstant(i8 undef), DIOpArg(0, i8), DIOpArg(1, i16), DIOpComposite(3, i32))), !dbg [[DBG30:![0-9]+]]
; CHECK-NEXT:    [[VAR0FRAG0:%.*]] = alloca i8, align 2
; CHECK-NEXT:    call void @llvm.dbg.declare(metadata ptr [[VAR0FRAG0]], metadata [[META31]], metadata !DIExpr(DIOpArg(0, ptr), DIOpDeref(i8))), !dbg [[DBG32:![0-9]+]]
; CHECK-NEXT:    [[VAR0FRAG1:%.*]] = alloca i16, align 2
; CHECK-NEXT:    call void @llvm.dbg.declare(metadata ptr [[VAR0FRAG1]], metadata [[META33]], metadata !DIExpr(DIOpArg(0, ptr), DIOpDeref(i16))), !dbg [[DBG32]]
; CHECK-NEXT:    ret void, !dbg [[DBG32]]
;
entry:
  %Var0Frag0 = alloca i8, align 2
  call void @llvm.dbg.declare(metadata ptr %Var0Frag0, metadata !24, metadata !DIExpression(DW_OP_LLVM_fragment, 8, 8)), !dbg !23
  %Var0Frag1 = alloca i16, align 2
  call void @llvm.dbg.declare(metadata ptr %Var0Frag1, metadata !24, metadata !DIExpression(DW_OP_LLVM_fragment, 16, 16)), !dbg !23
  ret void, !dbg !23
}

define dso_local void @FuncFragmentsWithEndGap() #0 !dbg !25 {
; CHECK-LABEL: define dso_local void @FuncFragmentsWithEndGap(
; CHECK-SAME: ) #[[ATTR0]] !dbg [[DBG34:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @llvm.dbg.declare(metadata !DIArgList([[META37:![0-9]+]], [[META39:![0-9]+]]), metadata [[META35:![0-9]+]], metadata !DIExpr(DIOpArg(0, i16), DIOpArg(1, i8), DIOpConstant(i8 undef), DIOpComposite(3, i32))), !dbg [[DBG36:![0-9]+]]
; CHECK-NEXT:    [[VAR0FRAG0:%.*]] = alloca i8, align 2
; CHECK-NEXT:    call void @llvm.dbg.declare(metadata ptr [[VAR0FRAG0]], metadata [[META37]], metadata !DIExpr(DIOpArg(0, ptr), DIOpDeref(i8))), !dbg [[DBG38:![0-9]+]]
; CHECK-NEXT:    [[VAR0FRAG1:%.*]] = alloca i16, align 2
; CHECK-NEXT:    call void @llvm.dbg.declare(metadata ptr [[VAR0FRAG1]], metadata [[META39]], metadata !DIExpr(DIOpArg(0, ptr), DIOpDeref(i16))), !dbg [[DBG38]]
; CHECK-NEXT:    ret void, !dbg [[DBG38]]
;
entry:
  %Var0Frag0 = alloca i8, align 2
  call void @llvm.dbg.declare(metadata ptr %Var0Frag0, metadata !27, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 16)), !dbg !26
  %Var0Frag1 = alloca i16, align 2
  call void @llvm.dbg.declare(metadata ptr %Var0Frag1, metadata !27, metadata !DIExpression(DW_OP_LLVM_fragment, 16, 8)), !dbg !26
  ret void, !dbg !26
}

define dso_local void @FuncFragmentsWithGaps() #0 !dbg !28 {
; CHECK-LABEL: define dso_local void @FuncFragmentsWithGaps(
; CHECK-SAME: ) #[[ATTR0]] !dbg [[DBG40:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @llvm.dbg.declare(metadata !DIArgList([[META43:![0-9]+]], [[META45:![0-9]+]]), metadata [[META41:![0-9]+]], metadata !DIExpr(DIOpConstant(i8 undef), DIOpArg(0, i8), DIOpConstant(i8 undef), DIOpArg(1, i8), DIOpComposite(4, i32))), !dbg [[DBG42:![0-9]+]]
; CHECK-NEXT:    [[VAR0FRAG0:%.*]] = alloca i8, align 2
; CHECK-NEXT:    call void @llvm.dbg.declare(metadata ptr [[VAR0FRAG0]], metadata [[META43]], metadata !DIExpr(DIOpArg(0, ptr), DIOpDeref(i8))), !dbg [[DBG44:![0-9]+]]
; CHECK-NEXT:    [[VAR0FRAG1:%.*]] = alloca i16, align 2
; CHECK-NEXT:    call void @llvm.dbg.declare(metadata ptr [[VAR0FRAG1]], metadata [[META45]], metadata !DIExpr(DIOpArg(0, ptr), DIOpDeref(i16))), !dbg [[DBG44]]
; CHECK-NEXT:    ret void, !dbg [[DBG44]]
;
entry:
  %Var0Frag0 = alloca i8, align 2
  call void @llvm.dbg.declare(metadata ptr %Var0Frag0, metadata !30, metadata !DIExpression(DW_OP_LLVM_fragment, 8, 8)), !dbg !29
  %Var0Frag1 = alloca i16, align 2
  call void @llvm.dbg.declare(metadata ptr %Var0Frag1, metadata !30, metadata !DIExpression(DW_OP_LLVM_fragment, 24, 8)), !dbg !29
  ret void, !dbg !29
}


; TODO: Tests for gaps at start/end, and different combinations

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

attributes #0 = { noinline nounwind uwtable }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}

!0 = distinct !DICompileUnit(language: DW_LANG_C11, file: !1, producer: "clang", emissionKind: FullDebug)
!1 = !DIFile(filename: "-", directory: "/")
!2 = !{i32 7, !"Dwarf Version", i32 5}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = distinct !DISubprogram(name: "FuncSingleSimpleDeclare", scope: !1, file: !1, line: 1, type: !5, unit: !0, retainedNodes: !7)
!5 = !DISubroutineType(types: !6)
!6 = !{null}
!7 = !{}
!8 = !DILocation(line: 1, column: 1, scope: !4)
!9 = !DILocalVariable(name: "Var0", scope: !4, file: !1, line: 1, type: !10)
!10 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!11 = distinct !DISubprogram(name: "FuncMultipleSimpleDeclares", scope: !1, file: !1, line: 1, type: !5, unit: !0, retainedNodes: !7)
!12 = !DILocation(line: 1, column: 1, scope: !11)
!13 = !DILocalVariable(name: "Var0", scope: !11, file: !1, line: 1, type: !10)
!14 = !DIBasicType(name: "int", size: 8, encoding: DW_ATE_signed)
!15 = !DILocalVariable(name: "Var1", scope: !11, file: !1, line: 1, type: !14)
!16 = distinct !DISubprogram(name: "FuncFragmentsWithoutGaps", scope: !1, file: !1, line: 1, type: !5, unit: !0, retainedNodes: !7)
!17 = !DILocation(line: 1, column: 1, scope: !16)
!18 = !DILocalVariable(name: "Var0", scope: !16, file: !1, line: 1, type: !10)
!19 = distinct !DISubprogram(name: "FuncFragmentsWithInternalGap", scope: !1, file: !1, line: 1, type: !5, unit: !0, retainedNodes: !7)
!20 = !DILocation(line: 1, column: 1, scope: !19)
!21 = !DILocalVariable(name: "Var0", scope: !19, file: !1, line: 1, type: !10)
!22 = distinct !DISubprogram(name: "FuncFragmentsWithStartGap", scope: !1, file: !1, line: 1, type: !5, unit: !0, retainedNodes: !7)
!23 = !DILocation(line: 1, column: 1, scope: !22)
!24 = !DILocalVariable(name: "Var0", scope: !22, file: !1, line: 1, type: !10)
!25 = distinct !DISubprogram(name: "FuncFragmentsWithEndGap", scope: !1, file: !1, line: 1, type: !5, unit: !0, retainedNodes: !7)
!26 = !DILocation(line: 1, column: 1, scope: !25)
!27 = !DILocalVariable(name: "Var0", scope: !25, file: !1, line: 1, type: !10)
!28 = distinct !DISubprogram(name: "FuncFragmentsWithGaps", scope: !1, file: !1, line: 1, type: !5, unit: !0, retainedNodes: !7)
!29 = !DILocation(line: 1, column: 1, scope: !28)
!30 = !DILocalVariable(name: "Var0", scope: !28, file: !1, line: 1, type: !10)

;.
; CHECK: attributes #[[ATTR0]] = { noinline nounwind uwtable }
; CHECK: attributes #[[ATTR1:[0-9]+]] = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
;.
; CHECK: [[META0:![0-9]+]] = distinct !DICompileUnit(language: DW_LANG_C11, file: [[META1:![0-9]+]], producer: "clang", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug)
; CHECK: [[META1]] = !DIFile(filename: "-", directory: "/")
; CHECK: [[META2:![0-9]+]] = !{i32 7, !"Dwarf Version", i32 5}
; CHECK: [[META3:![0-9]+]] = !{i32 2, !"Debug Info Version", i32 3}
; CHECK: [[DBG4]] = distinct !DISubprogram(name: "FuncSingleSimpleDeclare", scope: [[META1]], file: [[META1]], line: 1, type: [[META5:![0-9]+]], spFlags: DISPFlagDefinition, unit: [[META0]], retainedNodes: [[META7:![0-9]+]])
; CHECK: [[META5]] = !DISubroutineType(types: [[META6:![0-9]+]])
; CHECK: [[META6]] = !{null}
; CHECK: [[META7]] = !{}
; CHECK: [[META8]] = !DILocalVariable(name: "Var0", scope: [[DBG4]], file: [[META1]], line: 1, type: [[META9:![0-9]+]])
; CHECK: [[META9]] = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
; CHECK: [[DBG10]] = !DILocation(line: 1, column: 1, scope: [[DBG4]])
; CHECK: [[DBG11]] = distinct !DISubprogram(name: "FuncMultipleSimpleDeclares", scope: [[META1]], file: [[META1]], line: 1, type: [[META5]], spFlags: DISPFlagDefinition, unit: [[META0]], retainedNodes: [[META7]])
; CHECK: [[META12]] = !DILocalVariable(name: "Var0", scope: [[DBG11]], file: [[META1]], line: 1, type: [[META9]])
; CHECK: [[DBG13]] = !DILocation(line: 1, column: 1, scope: [[DBG11]])
; CHECK: [[META14]] = !DILocalVariable(name: "Var1", scope: [[DBG11]], file: [[META1]], line: 1, type: [[META15:![0-9]+]])
; CHECK: [[META15]] = !DIBasicType(name: "int", size: 8, encoding: DW_ATE_signed)
; CHECK: [[DBG16]] = distinct !DISubprogram(name: "FuncFragmentsWithoutGaps", scope: [[META1]], file: [[META1]], line: 1, type: [[META5]], spFlags: DISPFlagDefinition, unit: [[META0]], retainedNodes: [[META7]])
; CHECK: [[META17]] = !DILocalVariable(name: "Var0", scope: [[DBG16]], file: [[META1]], line: 1, type: [[META9]])
; CHECK: [[DBG18]] = !DILocation(line: 0, scope: [[DBG16]])
; CHECK: [[META19]] = distinct !DIFragment(type: i16)
; CHECK: [[DBG20]] = !DILocation(line: 1, column: 1, scope: [[DBG16]])
; CHECK: [[META21]] = distinct !DIFragment(type: i16)
; CHECK: [[DBG22]] = distinct !DISubprogram(name: "FuncFragmentsWithInternalGap", scope: [[META1]], file: [[META1]], line: 1, type: [[META5]], spFlags: DISPFlagDefinition, unit: [[META0]], retainedNodes: [[META7]])
; CHECK: [[META23]] = !DILocalVariable(name: "Var0", scope: [[DBG22]], file: [[META1]], line: 1, type: [[META9]])
; CHECK: [[DBG24]] = !DILocation(line: 0, scope: [[DBG22]])
; CHECK: [[META25]] = distinct !DIFragment(type: i8)
; CHECK: [[DBG26]] = !DILocation(line: 1, column: 1, scope: [[DBG22]])
; CHECK: [[META27]] = distinct !DIFragment(type: i16)
; CHECK: [[DBG28]] = distinct !DISubprogram(name: "FuncFragmentsWithStartGap", scope: [[META1]], file: [[META1]], line: 1, type: [[META5]], spFlags: DISPFlagDefinition, unit: [[META0]], retainedNodes: [[META7]])
; CHECK: [[META29]] = !DILocalVariable(name: "Var0", scope: [[DBG28]], file: [[META1]], line: 1, type: [[META9]])
; CHECK: [[DBG30]] = !DILocation(line: 0, scope: [[DBG28]])
; CHECK: [[META31]] = distinct !DIFragment(type: i8)
; CHECK: [[DBG32]] = !DILocation(line: 1, column: 1, scope: [[DBG28]])
; CHECK: [[META33]] = distinct !DIFragment(type: i16)
; CHECK: [[DBG34]] = distinct !DISubprogram(name: "FuncFragmentsWithEndGap", scope: [[META1]], file: [[META1]], line: 1, type: [[META5]], spFlags: DISPFlagDefinition, unit: [[META0]], retainedNodes: [[META7]])
; CHECK: [[META35]] = !DILocalVariable(name: "Var0", scope: [[DBG34]], file: [[META1]], line: 1, type: [[META9]])
; CHECK: [[DBG36]] = !DILocation(line: 0, scope: [[DBG34]])
; CHECK: [[META37]] = distinct !DIFragment(type: i16)
; CHECK: [[DBG38]] = !DILocation(line: 1, column: 1, scope: [[DBG34]])
; CHECK: [[META39]] = distinct !DIFragment(type: i8)
; CHECK: [[DBG40]] = distinct !DISubprogram(name: "FuncFragmentsWithGaps", scope: [[META1]], file: [[META1]], line: 1, type: [[META5]], spFlags: DISPFlagDefinition, unit: [[META0]], retainedNodes: [[META7]])
; CHECK: [[META41]] = !DILocalVariable(name: "Var0", scope: [[DBG40]], file: [[META1]], line: 1, type: [[META9]])
; CHECK: [[DBG42]] = !DILocation(line: 0, scope: [[DBG40]])
; CHECK: [[META43]] = distinct !DIFragment(type: i8)
; CHECK: [[DBG44]] = !DILocation(line: 1, column: 1, scope: [[DBG40]])
; CHECK: [[META45]] = distinct !DIFragment(type: i8)
;.
